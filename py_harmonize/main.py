#!/usr/bin/env python

import argparse

from pathlib import Path

# TODO: Make these relative imports
from constants import AVAILABLE_HARMONIZATION_METHODS
from harmonization.handler import HarmonizationHandler
from report_generator import ReportGenerator

def _handle_harmonize_cmd(args):
    HarmonizationHandler(
        args.output_dir,
        args.harmonization_methods,
        args.df_path,
        args.site_colname,
        covariate_cols=args.covariate_cols,
        mask_path=args.mask_path,
    ).handle()


def _handle_report_cmd(args):
    ReportGenerator(
        args.output_dir,
        args.im_path_to_site_id_df_path,
        args.site_colname,
        args.anova_alpha,
        args.t_test_alpha,
        args.mtc,
        args.save_dfs,
        mask_path=args.mask_path,
    ).generate_report()


def _construct_parser():
    parser = argparse.ArgumentParser()
    sub_parsers = parser.add_subparsers(dest="sub_command")

    ######## Arguments common to multiple commands ########
    parent_parser_mask_path = argparse.ArgumentParser(add_help=False)
    parent_parser_mask_path.add_argument(
        "--mask_path",
        help="Path to harmonization mask. Harmonization will only be applied"
        "to voxels with intensity value == 1.",
        type=Path,
    )

    parent_parser_site_colname = argparse.ArgumentParser(add_help=False)
    parent_parser_site_colname.add_argument(
        "--site_colname",
        help="colname of the site variable in the dataframe at df_path",
        type=str,
        required=True
    )

    ######## Harmonization command ########
    sub_parser_harmonize = sub_parsers.add_parser(
        "harmonize",
        parents=[parent_parser_mask_path, parent_parser_site_colname],
    )
    sub_parser_harmonize.set_defaults(func=_handle_harmonize_cmd)

    # TODO: We expect this to exist, or it will be overwritten
    sub_parser_harmonize.add_argument(
        "-o",
        "--output_dir",
        help="Root directory of the harmonized images. A subdirectory for "
        "each harmonization technique is created. Each of these "
        "subdirectories contains the harmonized images for that technique, "
        "named exactly the same as in input_dir",
        type=Path,
        required=True,
    )

    sub_parser_harmonize.add_argument(
        "--harmonization_methods",
        help="Root directory of the harmonized images. A subdirectory for "
        "each harmonization technique is created. Each of these "
        "subdirectories contains the harmonized images for that technique, "
        "named exactly the same as in input_dir",
        required=True,
        nargs="+",
        choices=AVAILABLE_HARMONIZATION_METHODS,
    )

    sub_parser_harmonize.add_argument(
        "--df_path",
        help="Path to the dataframe matching each image filename "
        "to the corresponding site id. Also contains information on any other "
        "variables / covariates to include in the harmonization technique",
        type=Path,
        required=True,
    )

    sub_parser_harmonize.add_argument(
        "--covariate_cols",
        help="Other colnames of covariates to include. Note that columns with numerical values "
        "will be treated as continuous and columns with strings will be treated as categorical",
        type=str,
        nargs="+"
    )

    ######## Report generation command ########
    sub_parser_report = sub_parsers.add_parser(
        "generate_report", parents=[parent_parser_mask_path, parent_parser_site_colname]
    )
    sub_parser_report.set_defaults(func=_handle_report_cmd)

    # TODO: Add details about what files are generated by report
    sub_parser_report.add_argument(
        "-o",
        "--output_dir",
        help="Root directory of the report files.",
        type=Path,
        required=True,
    )

    sub_parser_report.add_argument(
        "--im_path_to_site_id_df_path",
        help="Path to the dataframe matching each image filename"
        "to the corresponding site id",
        type=Path,
        required=True,
    )

    sub_parser_report.add_argument(
        "--anova_alpha",
        help="Significance level for the anova to be done at each voxel",
        type=float,
        default=0.05,
    )

    sub_parser_report.add_argument(
        "--t_test_alpha",
        help="Significance level for the t-tests to be done at each voxel",
        type=float,
        default=0.05,
    )

    sub_parser_report.add_argument(
        "--mtc",
        help="Conduct Bonferroni multiple testing correction for the anovas and t-tests",
        action="store_true",
    )

    sub_parser_report.add_argument(
        "--save_dfs",
        help="Save the anova and t-test dataframes as part of the report "
        "Note that these can get large in file size",
        action="store_true",
    )

    return parser


if __name__ == "__main__":
    my_parser = _construct_parser()
    args = my_parser.parse_args()
    args.func(args)
